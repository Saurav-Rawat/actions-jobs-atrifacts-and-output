name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # outputs are used to share information between jobs.
    # eg = we have to share the name of the randomly generated file name with
    # some job(in our case index file inside dist/assets/index[somerandomtex].js)
    # we can obviously take the whole file in artifact and get that in other job but if we only want to share some info
    # which in this case is name of file
    outputs:
      # output identifier (name upto us also we can define as many as we want) we will use it later in other jobs to access output information.
      # we are using steps context to access the infomations generated in step
      # file-name is variable that we set in step
      script-file: ${{ steps.publish.outputs.file-name }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        # bellow id will be used to identify the step where we are generating output so we can use it in other jobs
        id: publish
        # bellow command is a linux command that will
        # 1. find the file(find dist/assets/*.js -type f)
        # 2. exectute echo command to print file name (-execdir echo "{}" ';')
        # {} this placeholder contains the file name we store in output name (file-name)
        #  >> $GITHUB_OUTPUT this command will target a special github file where output will be written
        run: find dist/assets/*.js -type f -execdir echo "file-name={}" >> $GITHUB_OUTPUT ';'
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        # additional configurations of action
        with:
          # name that we will use to retrive the files
          name: dist-files
          # path specifies which files we want to store as artifact
          # we can specify multiple files using | (pipe) symbol
          # for our case we only need one i.e dist file
          # path: |
          #   dist
          #   package.json
          path: dist
  deploy:
    # here we have added build as needs as we want artifacts to be generated in build step
    # which we will be downloading in the get build artifacts step
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: get build artifacts
        # bellow action(actions/download-artifact@v3) will download the artifacts generated in previous build job
        # and unzip them so we have access of the artifacts in deploy job
        # note: bellow command will give us the unzipped contents of dist file and not the dist file
        uses: actions/download-artifact@v3
        with:
          # bellow identifier is necessary to target the correct artifact
          name: dist-files
      # print artifact contents
      - name: Output Content
        run: ls
      - name: Output filename
        # to access outputs we use needs context
        # above we have given build as a job in needs so we can access all the outputs that
        # were generated in the build job
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
